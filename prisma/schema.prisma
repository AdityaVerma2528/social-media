// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @default(uuid())
  email    String    @unique
  name     String
  profiles Profile[]
}

model Profile {
  id        String    @id @default(uuid())
  User      User      @relation(fields: [userId], references: [id])
  userId    String    @unique
  name      String
  gender    String
  bio       String
  avatar    String
  location  String
  posts     Post[]
  likes     Like[]
  comments  Comment[]
  following Follows[] @relation("followingRelation")
  followers Follows[] @relation("followerRelation")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Post {
  id        String    @id @default(uuid())
  title     String
  imageUrl  String
  location  String
  profileId String
  likes     Like[]
  comments  Comment[]
  profile   Profile   @relation(fields: [profileId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Follows {
  id              String  @id @default(uuid())
  followerId      String
  followingId     String
  followingAvatar String
  followingEmail  String
  follower        Profile @relation("followerRelation", fields: [followerId], references: [id])
  following       Profile @relation("followingRelation", fields: [followingId], references: [id])

  createdAt DateTime @default(now())

  @@unique([followerId, followingId])
}

model Like {
  id        String   @id @default(uuid())
  profileId String   @unique
  postId    String   @unique
  Post      Post     @relation(fields: [postId], references: [id])
  Profile   Profile  @relation(fields: [profileId], references: [id])
  createdAt DateTime @default(now())
}

model Comment {
  id        String  @id @default(uuid())
  content   String
  postId    String  @unique
  profileId String  @unique
  Profile   Profile @relation(fields: [profileId], references: [id])
  Post      Post    @relation(fields: [postId], references: [id])
}
